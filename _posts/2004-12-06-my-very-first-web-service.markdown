---
layout: post
status: publish
published: true
title: my very first web service
author:
  display_name: groovecoder
  login: groovecoder
  email: luke.crouch@gmail.com
  url: http://groovecoder.com
author_login: groovecoder
author_email: luke.crouch@gmail.com
author_url: http://groovecoder.com
wordpress_id: 229
wordpress_url: http://groovecoder.com/2004/12/06/my-very-first-web-service/
date: '2004-12-06 18:11:00 -0600'
date_gmt: '2004-12-07 00:11:00 -0600'
categories:
- Uncategorized
tags: []
comments: []
---
<div style="text-align: justify;">okay, a little nuts-and-bolts post today. I've finished my first web service, though it is really just a web service wrapper to <a href="http://www.ec.ups.com/ecommerce/solutions/c1a2.html">a tool already offered online by UPS</a>. I guess the service I'm offering is a free implementation of their tool using WSDL and being able to hit UPS using the account I created. I guess I better say that by using my service, you agree to <a href="https://www.ups.com/servlet/registration?loc=en_US_EC&returnto=http://www.ec.ups.com/ecommerce/techdocs/online_tools.html">the terms that UPS has put on their service</a>. and don't go around using this in production or commercial programs, as I think it's not allowed without your own account, and my IP address will more than likely change soon, breaking the WSDL URL.</p>
<p><a href="http://68.0.120.127:8888/wshelper/service.php?class=upsRateRequest">here</a>'s the description as generated by <a href="http://www.zend.com/php5/contest/contest.php?id=144&amp;single=1">webservice helper</a>. <a href="http://68.0.120.127:8888/wshelper/service.php?class=upsRateRequest&wsdl">here</a>'s the WSDL for you to use.</p>
<p>what I've done is used cURL in PHP to make an HTTP post to UPS. I made a class that creates the correctly formed UPS access XML and request XML strings, then made another class and function that takes the inputs (as described in the WSDL) and returns an XML string. then I just added the proper documentation in the class (for ws-helper), and dropped that class into ws-helper's designated directory, and voila. it generated the WSDL and accepts the soap requests.</p>
<p>the code to consume this service in PHP 5 is pretty easy too, if you have configured PHP with --enable-soap, that is.</p>
<div style="text-align: left;">$lukeUPSRateService = SoapClient('http://68.0.120.127:8888/wshelper/service.php?class=upsRateRequest&wsdl');<br />
<br />$returnXML = $lukeUPSRateService->performUPSRateRequest($fromZip, $height, $length, $toZip, $weight, $width);</p>
<p>then you could do whatever you want with the XML...like, say...<br />
<br />(un-tested code follows)</p>
<p>$upsXMLObject = simplexml_load_string($returnXML);<br />
<br />$cheapestRate = 100000;<br />
<br />for($i=0; i<$upsXMLObject->RatedShipment.length; $i++){<br />
<br />if($upsXMLObject->RatedShipment[i]->TotalCharges->MonetaryValue < $cheapestRate){ $cheapestRate = $upsXMLObject->RatedShipment[i]->TotalCharges->MonetaryValue;<br />
<br />   }<br />
<br />}<br />
</div>
</p></div>
